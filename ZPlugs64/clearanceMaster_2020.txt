////
// dll path, language
////
[VarDef, zfutilPath, "dummy"]
[VarDef, dllPath, "dummy"]
[VarDef, enLangFilePath, "dummy"]
[VarDef, language]
////
// debug
[VarDef, dataDirPath, [fileNameResolvePath, "ClearanceMaster_2020\"]]
// install
//[VarDef, dataDirPath, [fileNameResolvePath, "ZBRUSH_ZSTARTUP\ZPlugs64\ClearanceMaster_2020\"]]
////

// value for calculation
[VarDef, height, 5.0]
[VarDef, minClearance, 0.0]
[VarDef, maxClearance, 2.0]
[MVarDef, memInOut, [Val, 1024*1024], 0]

//////
// search dlls
// from http://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/zfileutils/#dllPath
//////
[RoutineDef, CheckSystem,
    //check ZBrush version
    [VarSet,Zvers,[ZBrushInfo,0]]
    [If,[Val,Zvers] >= 4.8,,		
        [Note,"\Cff9923This zscript\Cffffff is not designed for this version of \Cff9923ZBrush\Cffffff.",,3,4737096,,300]
        [Exit]
    ]
    // Make sure we have the dll and set its path
    [If, [ZBrushInfo, 6]==0,//windows
        //use the path below for testing only
        [VarSet, dllPath, "ClearanceMaster_2020\clearanceMaster.dll"]
        [VarSet, zfutilPath, "ClearanceMaster_2020\ZFileUtils64.dll"]
        [VarSet, enLangFilePath, "ClearanceMaster_2020\lang\ClearanceMaster_2020_en.xml"]
        //use the path below for installed plugins
        //[VarSet, dllPath, "ZBRUSH_ZSTARTUP\ZPlugs64\ClearanceMaster_2020\clearanceMaster.dll"]
        //[VarSet, zfutilPath, "ZBRUSH_ZSTARTUP\ZPlugs64\ClearanceMaster_2020\ZFileUtils64.dll"]
        //[VarSet, enLangFilePath, "ZBRUSH_ZSTARTUP\ZPlugs64\ClearanceMaster_2020\lang\ClearanceMaster_2020_en.xml"]
        ,
        // no support for macOS for this plugins
    ]
    // check if there are dll/lib exists
    [If, [FileExists, [Var,dllPath]],
    , // else no DLL.
    [Note,"\Cff9923Note :\Cc0c0c0 The \Cff9923 ClearanceMaster plugin \Cffffffdll/lib\Cc0c0c0 could not be found at the correct location.  Please re-install the plugin, making sure the relevant files and folders are in the \CffffffZStartup/ZPlugs\Cc0c0c0 folder."]
    [Exit]
    ]
]
//////


//////
// translation routine
// from http://docs.pixologic.com/user-guide/customizing-zbrush/zscripting/zfileutils/localization/
//////
[RoutineDef, ZFU_RegisterLocalizationFile,
	[FileExecute, [Var, zfutilPath], RegisterLocalizationFile, enFilePath]
, enFilePath]
//////

//////
// startup
//////
// + search dll
[RoutineCall, CheckSystem]
//[RoutineCall, ZFU_GetCurrentLanguage, language]
[RoutineCall, ZFU_RegisterLocalizationFile, [FileNameResolvePath, [Var, enLangFilePath]]]

//////
// UI
//////
[ISubPalette, "ZPlugin:Clearance Master"]

[ISlider, "ZPlugin:Clearance Master:Height for selected object", 5.0, 0.001, 0.001, 300.0, "Set height for selected object.",
    [VarSet, height, [IGet, "ZPlugin:Clearance Master:Height for selected object"]],
    0,
    1
]
[ISlider, "ZPlugin:Clearance Master:Minimum clearance", 0.0, 0.001, 0.0, 9.999, "Set minimum clearance for the colors gradient.",
    [VarSet, minClearance, [IGet, "ZPlugin:Clearance Master:Minimum clearance"]]
    [If, (minClearance >= maxClearance),
        [VarSet, maxClearance, minClearance + 0.001]
        [ISet, "ZPlugin:Clearance Master:Maximum clearance", minClearance + 0.001]
    ],
    0,
    1
]
[ISlider, "ZPlugin:Clearance Master:Maximum clearance", 2.0, 0.001, 0.001, 10.0, "Set maximum clearance for the colors gradient.",
    [VarSet, maxClearance, [IGet, "ZPlugin:Clearance Master:Maximum clearance"]]
    [If, (maxClearance <= minClearance),
        [VarSet, minClearance, maxClearance - 0.001]
        [ISet, "ZPlugin:Clearance Master:Minimum clearance", maxClearance - 0.001]
    ],
    0,
    1
]

[ISwitch, "ZPlugin:Clearance Master:Overwrite", 1, "Overwrite original Polypaint.",
,
,
0,
1
]


[IButton, "ZPlugin:Clearance Master:From Clearance", "Polypaint from clearance.",
[IFreeze,
    [If, [IExists, Tool:Export],
        [RoutineCall, CheckSystem]

        // get the name of current active sub tool
        [VarSet, subTName, ""]
        [VarSet, activeSubT, [SubToolGetActiveIndex]]
        [VarSet, totalSubTools, [SubToolGetCount]]

        [VarDef, subToolNameList([Var, totalSubTools])]
        [VarDef, posXList([Var, totalSubTools])]
        [VarDef, posYList([Var, totalSubTools])]
        [VarDef, posZList([Var, totalSubTools])]
        [VarDef, sizeXList([Var, totalSubTools])]
        [VarDef, sizeYList([Var, totalSubTools])]
        [VarDef, sizeZList([Var, totalSubTools])]

        // loop over subtools
        [Loop,totalSubTools,
            [SubToolSelect, [Var, n]]

            [VarSet, subTName, [IGetTitle,Tool:ItemInfo]] // gets the tool name
            [VarSet, subToolNameList(n), [StrExtract, #subTName, 0, [StrLength, #subTName]-2]] // this takes of the end period

            // export current subtool to GoZ file (temporary file)
            [FileNameSetNext, [StrMerge, [Var, dataDirPath], #subToolNameList(n), ".GoZ"]]

            // store current export settings
            [VarSet, origScale, [IGet,Tool:Export:Scale]]
            [VarSet, origOffsetX, [IGet,Tool:Export:X Offset]]
            [VarSet, origOffsetY, [IGet,Tool:Export:Y Offset]]
            [VarSet, origOffsetZ, [IGet,Tool:Export:Z Offset]]
            [ISet,Tool:Export:Scale,0.0]
            [ISet,Tool:Export:X Offset,0.0]
            [ISet,Tool:Export:Y Offset,0.0]
            [ISet,Tool:Export:Z Offset,0.0]
            // store current position
            [VarSet, posXList(n), [IGet,Tool:Geometry:X Position]]
            [VarSet, posYList(n), [IGet,Tool:Geometry:Y Position]]
            [VarSet, posZList(n), [IGet,Tool:Geometry:Z Position]]
            // store current size
            [VarSet, sizeXList(n), [IGet,Tool:Geometry:X Size]]
            [VarSet, sizeYList(n), [IGet,Tool:Geometry:Y Size]]
            [VarSet, sizeZList(n), [IGet,Tool:Geometry:Z Size]]

            [IPress,Tool:Export]

            // restore scale/Offset
            [ISet,Tool:Export:Scale,[Var, origScale]]
            [ISet,Tool:Export:X Offset,[Var, origOffsetX]]
            [ISet,Tool:Export:Y Offset,[Var, origOffsetY]]
            [ISet,Tool:Export:Z Offset,[Var, origOffsetZ]]
        , n]

        // select active subtool
        [SubToolSelect, [Var, activeSubT]]
        [VarSet, subTName, #subToolNameList([Var, activeSubT])] // this takes of the end period
        [VarSet, textForDll, [StrMerge, [Var, dataDirPath], [Var, subTName], ".GoZ"]]
        // write parameters to memblock
        [MVarSet, memInOut, 0, [Var, height]]
        [MVarSet, memInOut, 1, [Var, minClearance]]
        [MVarSet, memInOut, 2, [Var, maxClearance]]

        [VarSet, result, [FileExecute, [Var, dllPath], "computeClearance", [Var, textForDll], 0, memInOut, ]]

        [If, result,
            // import to Tool
                [If, [IGet, "ZPlugin:Clearance Master:Overwrite"],
                    [loop, totalSubTools,
                        [SubToolSelect, [Var, n]]
                        // import
                        [FileNameSetNext, [StrMerge, [Var, dataDirPath], #subToolNameList(n), ".GoZ"]]
                        [IPress,"Tool:Import"]
                        // fix position/size
                        [ISet, Tool:Geometry:X Position, [Var, posXList(n)]]
                        [ISet, Tool:Geometry:Y Position, [Var, posYList(n)]]
                        [ISet, Tool:Geometry:Z Position, [Var, posZList(n)]]
                        [ISet, Tool:Geometry:X Size, [Var, sizeXList(n)]]
                        [ISet, Tool:Geometry:Y Size, [Var, sizeYList(n)]]
                        [ISet, Tool:Geometry:Z Size, [Var, sizeZList(n)]]
                        // erase temporary file.
                        [FileDelete, [StrMerge, [Var, dataDirPath], #subToolNameList(n), ".GoZ"]]
                    , n]
                    // select active subtool
                    [SubToolSelect, [Var, activeSubT]]
                    ,
                    // select star tool
                    [IPress,Tool:PolyMesh3D]
                    [loop, totalSubTools,
                        // import
                        [FileNameSetNext, [StrMerge, [Var, dataDirPath], #subToolNameList(n), ".GoZ"]]
                        [IPress,"Tool:Import"]
                        // fix position/size
                        [ISet, Tool:Geometry:X Position, [Var, posXList(n)]]
                        [ISet, Tool:Geometry:Y Position, [Var, posYList(n)]]
                        [ISet, Tool:Geometry:Z Position, [Var, posZList(n)]]
                        [ISet, Tool:Geometry:X Size, [Var, sizeXList(n)]]
                        [ISet, Tool:Geometry:Y Size, [Var, sizeYList(n)]]
                        [ISet, Tool:Geometry:Z Size, [Var, sizeZList(n)]]
                        // erase temporary file.
                        [FileDelete, [StrMerge, [Var, dataDirPath], #subToolNameList(n), ".GoZ"]]
                        // duplicate
                        [if, (n != (totalSubTools - 1)),
                            [IPress,Tool:SubTool:Duplicate]
                        ]
                    , n]
                ]
        ,
            [Note, "Sorry, there is some error..."]
        ]
    ]
]
    ,
    0,
    1
]

[IEnable, "ZPlugin:Clearance Master:Overwrite"]